{
  "index": {
    "title": "Дистрибьютор JSON REST API данных",
    "startButton": "Начало",
    "intro": "бесплатный дистрибьютор JSON RESP API данных для прототипизации и тестирования API с ложными данными.",
    "linkTo": "Все ресурсы доступны для использования под данным URL адрессом",
    "endpointsDescription1": "Описание все ресурсов, а также количество доступных записей для каждого из них будет описано ниже.",
    "endpointsDescription2": "Больше о каждом из ресурсов и о том, как они связаны, можно прочитать в",
    "availableEndpoints": "Ниже находится таблица, иллюстрирующая доступные ресурсы и количество записей для каждого.",
    "relation": "Следует помнить, что ресурсы связанны между собой образуя импровизированную базу данных со связанными записями.",
    "docs": "документации",
    "quantity": "Кол-во записей",
    "introMenu": {
      "intro": "Вступление",
      "availableEndpoints": "Доступные ресурсы",
      "examples": "Примеры"
    },
    "examplesText": "Вот несколько примеров того, как вы можете использовать конечные точки в своем собственном API и какой ответ вы можете ожидать.",
    "examples": {
      "allRecords1": "Все записи для одного ресурса доступны под",
      "allRecords2": "путем.",
      "specificRecord1": "Если вы хотите получить только одну конкретную запись, просто укажите",
      "specificRecord2": "рекорда по ресурсу.",
      "pagination1": "Также пагинация с общим количеством (",
      "pagination2": "параметр - опционален) рекордов ресурса доступна с"
    }
  },
  "about": {
    "title": "О проекте",
    "contact": "Контакт",
    "description": "это абсолютно бесплатный проект с открытым исходным кодом, который был создан как обучающий проект для изучения 3 фреймворков — React + Next.js и Nest.js, а также всего по развертыванию AWS.",
    "more": "Подробнее о каждой части проекта — front-end и back-end — вы можете найти на моих страницах GitHub.",
    "contactTitle": "В случае возникновения каких-либо вопросов о проекте (ах) (или даже просто если вы хотите поболтать) всегда можете меня найти здесь - "
  },
  "docs": {
    "introduction": {
      "title": "является абсолютно бесплатным распространителем данных JSON с открытым исходным кодом для REST API, который позволяет разработчикам, не имеющим серверной части, заполнять страницы поддельными данными.",
      "description": "В вашем распоряжении есть несколько конечных точек (ресурсов), которые используются для получения данных в соответствии с приведенной ниже документацией. Обратите внимание, что конечные точки связаны друг с другом в виде импровизированной базы данных SQL. А используя специальный запрос, вы можете использовать JOIN для получения данных, относящихся к 2 или более ресурсам. Подробнее об этом будет показано ниже, в разделах, в которых доступен данный функционал.",
      "endpointDefault": "По умолчанию у каждого ресурса есть свои маршруты по умолчанию, которые позволяют, например, получить один пост по id или перечислить их все (и посчитать).",
      "docsReference": "Также документация Swagger доступна под",
      "generics": "Все типы ответов будут написаны и описаны на TypeScript."
    },
    "users": {
      "title": "вероятно, самая важная конечная точка, которая связана со всеми другими ресурсами — Post и Todo — отношениями. По сути, это означает, что у каждого пользователя есть как минимум одна запись и одна задача, поэтому вы можете соеденить и получать данные — записи или задачи — относящиеся только к одному пользователю.",
      "description": "Ниже будут перечислены все возможные конечные точки, параметры запроса, количество записей, ответы и их типы.",
      "entity": "как объект имеет свои обязательные и необязательные поля, и у вас есть возможность управлять им и получать поля, которые вы хотите получить, используя параметры запроса. И прежде чем мы начнем, давайте опишем сущность.",
      "relations": "Как было описано ранее, ресурсы связаны друг с другом, создавая импровизированную базу данных с отношениями. В данном случае это выглядит так - у каждого пользователя есть как минимум одна задача и одна запись, то есть, говоря языком базы данных - создание соединений один-ко-многим. Подробнее о ресурсах Post и Todo будет написано ниже, а вот как можно связаться с пользователем"
    },
    "posts": {
      "title": "это ресурс, который имеет - говоря языком базы данных - связь один-ко-многим с сущностью пользователя. По сути, это означает, что у одного пользователя может быть много постов.",
      "description": "Ниже будут перечислены все возможные конечные точки, параметры запроса, количество записей, ответы и их типы.",
      "entity": "так же, как сущность Пользователь имеет обязательные и необязательные поля, доступ к которым можно управлять через параметры запроса."
    },
    "todos": {
      "title": "это последний ресурс, который работает так же, как объект Post, то есть имеет соединение один-ко-многим с объектом User, где у одного пользователя может быть много задач.",
      "description": "Ниже будут перечислены все возможные конечные точки, параметры запроса, количество записей, ответы и их типы.",
      "entity": "сужность:"
    }
  }
}
