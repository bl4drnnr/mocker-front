{
  "index": {
    "title": "Fake JSON REST API data distribution",
    "startButton": "Let's jump into",
    "intro": "is free JSON RESP API data distributor for prototyping and testing API with mock data.",
    "linkTo": "All endpoint are available to use under this URL address",
    "endpointsDescription1": "Description of endpoints and quantity of available records under every endpoint will be listed below.",
    "endpointsDescription2": "More about every endpoint and how they related you can find in",
    "availableEndpoints": "There is a table bellow, illustrating available endpoints and quantity of records per endpoint.",
    "relation": "Keep in mind, that endpoints are related between each other and can be used as improvised database with relations.",
    "docs": "documentation",
    "quantity": "Quantity of records",
    "introMenu": {
      "intro": "Introduction",
      "availableEndpoints": "Available endpoints",
      "examples": "Examples"
    },
    "examplesText": "Here is a couple of example on how you can use endpoints in your own API and for what kind of response you can wait.",
    "examples": {
      "allRecords1": "All records for one resource are available under",
      "allRecords2": "resource route.",
      "specificRecord1": "If you want to get only one specific record, just specify",
      "specificRecord2": "of the record for resource.",
      "pagination1": "Also, pagination with total quantity (",
      "pagination2": "param - optional) of resource records is available with"
    }
  },
  "about": {
    "title": "About project",
    "contact": "Contact me",
    "description": "is absolutely open-source and free project, that had been created as learn project to learn 3 frameworks - React + Next.js and Nest.js and all AWS deployment staff.",
    "more": "More about every part of project - front-end and back-end - you can find on my GitHub pages",
    "contactTitle": "In case of any questions about project(s) (or even just if you want to chat) always feel free to contact me at - "
  },
  "docs": {
    "introduction": {
      "title": "is absolutely free, open source mock JSON data distributor for REST API's that allows developers, not having back-end, fill pages with fake data.",
      "description": "At your disposal, there are a couple of endpoints (resources) which are used to get data according to documentation below. Please, pay attention, that endpoints are related between each other in the way of improvised SQL database. And using special query, you can do JOINs to get data related to 2 or more resources. More about it will be displayed below, in sections in which this functionality is available.",
      "endpointDefault": "By default, every resource has its own default routes that allow you, for example, to get one post by id or list them all (and count).",
      "docsReference": "Also Swagger documentation is available under",
      "generics": "All response types will be written and described on TypeScript manner."
    },
    "users": {
      "title": "is probably most important endpoint that is being related to all other resources - Post and Todo - by relationship. Basically, it means that every user has at least one post and one todo, so, you can JOIN and get data - posts or todos - related to only one user.",
      "description": "Below will be listed all possible endpoints, query parameters, quantities of records, responses and their types.",
      "entity": "as entity has its own required fields and optional fields, and you have opportunity to manage it and get fields you want to get using query parameters. And before we start, let's describe entity.",
      "relations": "As it was described before, resources are related between each other creating improvised database with relations. In this case it looks like this - every user has at least one todo and one post, so, speaking in database language - creating one-to-many connections. More about Post and Todo resources will be written below, and here is how you can get related to user."
    },
    "posts": {
      "title": "is resource, that has - talking database language - one-to-many connection to User entity. Basically, it means, that one user can have many posts.",
      "description": "Below will be listed all possible endpoints, query parameters, quantities of records, responses and their types.",
      "entity": "the same as User entity has required and optional fields access to which can be manages through query parameters."
    },
    "todos": {
      "title": "is the last resource, that has works in the same way as Post entity, meaning, has one-to-many connection to User entity, where one user can have many todos",
      "description": "Below will be listed all possible endpoints, query parameters, quantities of records, responses and their types.",
      "entity": "entity:"
    }
  }
}
